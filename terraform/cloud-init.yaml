#cloud-config
# Configuración automática de la VM para aplicaciones React con proxy reverso

package_update: true
package_upgrade: true

packages:
  - nginx
  - nodejs
  - npm
  - git
  - curl
  - wget
  - unzip
  - htop
  - tree
  - certbot
  - python3-certbot-nginx
  - ufw
  - cron

write_files:
  # Configuración básica de Nginx como proxy reverso
  - path: /etc/nginx/sites-available/webapp
    content: |
      # Redirección de HTTP a HTTPS
      server {
          listen 80;
          server_name ${corporativa_domain} ${eyenga_domain};
          return 301 https://$server_name$request_uri;
      }

      # Proxy para Corporativa (puerto 3000)
      server {
          listen 443 ssl http2;
          server_name ${corporativa_domain};
          
          # Certificados SSL (se configurarán con Ansible)
          ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
          ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
          
          location / {
              proxy_pass http://127.0.0.1:3000;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
          }
      }

      # Proxy para Eyenga (puerto 3001)  
      server {
          listen 443 ssl http2;
          server_name ${eyenga_domain};
          
          # Certificados SSL (se configurarán con Ansible)
          ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
          ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
          
          location / {
              proxy_pass http://127.0.0.1:3001;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
          }
      }

      # Servidor por defecto para acceso por IP
      server {
          listen 443 ssl http2 default_server;
          server_name _;
          
          ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
          ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
          
          location / {
              return 200 '<!DOCTYPE html>
              <html><head><title>Executive Service Business</title></head>
              <body style="font-family:Arial;text-align:center;margin:50px;">
              <h1>🚀 Executive Service Business</h1>
              <p>Aplicaciones disponibles:</p>
              <p><a href="https://${corporativa_domain}">Corporativa</a></p>
              <p><a href="https://${eyenga_domain}">Eyenga</a></p>
              </body></html>';
              add_header Content-Type text/html;
          }
          
          location /status {
              return 200 "OK - Proxy funcionando\n";
              add_header Content-Type text/plain;
          }
      }

  # Script básico de preparación
  - path: /home/ubuntu/prepare-system.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e

      echo "=== Preparando sistema para Ansible ==="

      # Crear certificado autofirmado temporal
      sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/ssl/private/nginx-selfsigned.key \
        -out /etc/ssl/certs/nginx-selfsigned.crt \
        -subj "/C=ES/ST=Madrid/L=Madrid/O=Executive Service Business/CN=$(curl -s ifconfig.me)"

      # Configurar permisos
      sudo chmod 600 /etc/ssl/private/nginx-selfsigned.key
      sudo chmod 644 /etc/ssl/certs/nginx-selfsigned.crt

      # Habilitar sitio
      sudo ln -sf /etc/nginx/sites-available/webapp /etc/nginx/sites-enabled/
      sudo rm -f /etc/nginx/sites-enabled/default

      # Crear usuario para PM2 si no existe
      if ! id "pm2user" &>/dev/null; then
          sudo useradd -m -s /bin/bash pm2user
      fi

      # Instalar PM2 y serve globalmente
      sudo npm install -g pm2 serve

      echo "=== Sistema preparado para Ansible ==="

runcmd:
  # Actualizar Node.js a la versión 20 LTS
  - curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
  - sudo apt-get install -y nodejs

  # Configurar firewall - SOLO puertos 22 y 443
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow ssh
  - ufw allow 443
  - echo "y" | ufw enable

  # Iniciar y habilitar servicios
  - systemctl enable nginx
  - systemctl start nginx

  # Ejecutar script de preparación
  - sudo -u ubuntu /home/ubuntu/prepare-system.sh

  # Reiniciar Nginx con nueva configuración
  - systemctl restart nginx

final_message: |
  ====================================
  🚀 VM configurada para Ansible! 🚀
  ====================================

  La VM está lista para deployment con Ansible.

  Configuración actual:
  - Nginx: Proxy reverso configurado
  - Firewall: Solo puertos 22 (SSH) y 443 (HTTPS)
  - SSL: Certificado temporal para IP
  - Node.js: v20 LTS
  - PM2: Instalado globalmente

  Próximos pasos:
  1. Configurar tokens DuckDNS en Ansible
  2. Ejecutar: ./deploy.sh desde /workspace/ansible/
  3. Configurar SSL: ansible-playbook setup-ssl.yml

  SSH: ssh ubuntu@IP_PUBLICA
  ====================================
